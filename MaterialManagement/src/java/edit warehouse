import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import axios from 'axios';

const EditWarehouse = () => {
  const { id } = useParams();
  const [formData, setFormData] = useState(null);
  const [categories, setCategories] = useState([]);
  const [suppliers, setSuppliers] = useState([]);
  const [message, setMessage] = useState('');

  useEffect(() => {
    // Load data
    axios.get(`http://localhost:3000/api/warehouse/${id}`).then(res => setFormData(res.data));
    axios.get(`http://localhost:3000/api/categories`).then(res => setCategories(res.data));
    axios.get(`http://localhost:3000/api/suppliers`).then(res => setSuppliers(res.data));
  }, [id]);

  const handleChange = e => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async e => {
    e.preventDefault();
    try {
      await axios.put(`http://localhost:3000/api/warehouse/${id}`, formData);
      setMessage('Material updated successfully!');
    } catch (err) {
      setMessage('Error updating material');
    }
  };

  if (!formData) return <div>Loading...</div>;

  return (
    <div className="p-6 max-w-xl mx-auto">
      <h2 className="text-2xl font-bold mb-4">Edit Material</h2>
      <form onSubmit={handleSubmit} className="space-y-4">
        <input name="material_code" placeholder="Code" className="w-full border p-2" value={formData.material_code} onChange={handleChange} required />
        <input name="material_name" placeholder="Name" className="w-full border p-2" value={formData.material_name} onChange={handleChange} required />
        <input name="materials_url" placeholder="Image URL" className="w-full border p-2" value={formData.materials_url || ''} onChange={handleChange} />

        <select name="material_status" className="w-full border p-2" value={formData.material_status} onChange={handleChange}>
          <option value="new">New</option>
          <option value="used">Used</option>
          <option value="damaged">Damaged</option>
        </select>

        <input name="condition_percentage" type="number" min="0" max="100" placeholder="Condition (%)" className="w-full border p-2" value={formData.condition_percentage} onChange={handleChange} />
        <input name="price" type="number" min="0" step="0.01" placeholder="Price" className="w-full border p-2" value={formData.price} onChange={handleChange} />
        <input name="quantity" type="number" min="0" placeholder="Quantity" className="w-full border p-2" value={formData.quantity} onChange={handleChange} />

        <select name="category_id" className="w-full border p-2" value={formData.category_id} onChange={handleChange}>
          <option value="">-- Select Category --</option>
          {categories.map(cat => (
            <option key={cat.category_id} value={cat.category_id}>{cat.category_name}</option>
          ))}
        </select>

        <select name="supplier_id" className="w-full border p-2" value={formData.supplier_id || ''} onChange={handleChange}>
          <option value="">-- Optional Supplier --</option>
          {suppliers.map(sup => (
            <option key={sup.supplier_id} value={sup.supplier_id}>{sup.supplier_name}</option>
          ))}
        </select>

        <button type="submit" className="bg-green-600 text-white px-4 py-2 rounded">Update</button>
        {message && <p className="text-green-700 mt-2">{message}</p>}
      </form>
    </div>
  );
};

export default EditWarehouse;

import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import EditWarehouse from './components/EditWarehouse';

<Router>
  <Routes>
    <Route path="/warehouse/edit/:id" element={<EditWarehouse />} />
    {/* Các route khác */}
  </Routes>
</Router>



//Backend
// Thêm vào routes/warehouseRoutes.js
router.get('/:id', async (req, res) => {
    const { id } = req.params;
    try {
        const [rows] = await db.execute(`
            SELECT * FROM Materials WHERE material_id = ? AND disable = 0
        `, [id]);

        if (rows.length === 0) {
            return res.status(404).json({ message: 'Material not found' });
        }

        res.json(rows[0]);
    } catch (err) {
        console.error('Error fetching material:', err);
        res.status(500).json({ message: 'Internal server error' });
    }
});

router.put('/:id', async (req, res) => {
    const { id } = req.params;
    const {
        material_code, material_name, materials_url,
        material_status, condition_percentage, price,
        quantity, category_id, supplier_id
    } = req.body;

    try {
        await db.execute(`
            UPDATE Materials SET
                material_code = ?, material_name = ?, materials_url = ?, material_status = ?,
                condition_percentage = ?, price = ?, quantity = ?, category_id = ?, supplier_id = ?,
                updated_at = CURRENT_TIMESTAMP
            WHERE material_id = ? AND disable = 0
        `, [
            material_code, material_name, materials_url, material_status,
            condition_percentage, price, quantity, category_id, supplier_id || null, id
        ]);

        res.json({ message: 'Material updated successfully' });
    } catch (err) {
        console.error('Error updating material:', err);
        res.status(500).json({ message: 'Internal server error' });
    }
});
