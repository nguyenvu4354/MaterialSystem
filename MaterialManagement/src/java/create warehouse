import React, { useState, useEffect } from 'react';
import axios from 'axios';

const CreateWarehouse = () => {
  const [formData, setFormData] = useState({
    material_code: '',
    material_name: '',
    materials_url: '',
    material_status: 'new',
    condition_percentage: 100,
    price: 0,
    quantity: 0,
    category_id: '',
    supplier_id: ''
  });

  const [categories, setCategories] = useState([]);
  const [suppliers, setSuppliers] = useState([]);
  const [message, setMessage] = useState('');

  useEffect(() => {
    axios.get('http://localhost:3000/api/categories').then(res => setCategories(res.data));
    axios.get('http://localhost:3000/api/suppliers').then(res => setSuppliers(res.data));
  }, []);

  const handleChange = e => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async e => {
    e.preventDefault();
    try {
      await axios.post('http://localhost:3000/api/warehouse/create', formData);
      setMessage('Material created successfully!');
      setFormData({
        material_code: '',
        material_name: '',
        materials_url: '',
        material_status: 'new',
        condition_percentage: 100,
        price: 0,
        quantity: 0,
        category_id: '',
        supplier_id: ''
      });
    } catch (err) {
      setMessage(err.response?.data?.message || 'Error creating material');
    }
  };

  return (
    <div className="p-6 max-w-xl mx-auto">
      <h2 className="text-2xl font-bold mb-4">Create New Material</h2>
      <form onSubmit={handleSubmit} className="space-y-4">
        <input name="material_code" placeholder="Code" className="w-full border p-2" value={formData.material_code} onChange={handleChange} required />
        <input name="material_name" placeholder="Name" className="w-full border p-2" value={formData.material_name} onChange={handleChange} required />
        <input name="materials_url" placeholder="Image URL" className="w-full border p-2" value={formData.materials_url} onChange={handleChange} />
        
        <select name="material_status" className="w-full border p-2" value={formData.material_status} onChange={handleChange}>
          <option value="new">New</option>
          <option value="used">Used</option>
          <option value="damaged">Damaged</option>
        </select>

        <input name="condition_percentage" type="number" min="0" max="100" placeholder="Condition (%)" className="w-full border p-2" value={formData.condition_percentage} onChange={handleChange} />
        <input name="price" type="number" min="0" step="0.01" placeholder="Price" className="w-full border p-2" value={formData.price} onChange={handleChange} />
        <input name="quantity" type="number" min="0" placeholder="Quantity" className="w-full border p-2" value={formData.quantity} onChange={handleChange} />
        
        <select name="category_id" className="w-full border p-2" value={formData.category_id} onChange={handleChange} required>
          <option value="">-- Select Category --</option>
          {categories.map(cat => (
            <option key={cat.category_id} value={cat.category_id}>{cat.category_name}</option>
          ))}
        </select>

        <select name="supplier_id" className="w-full border p-2" value={formData.supplier_id} onChange={handleChange}>
          <option value="">-- Optional Supplier --</option>
          {suppliers.map(sup => (
            <option key={sup.supplier_id} value={sup.supplier_id}>{sup.supplier_name}</option>
          ))}
        </select>

        <button type="submit" className="bg-blue-600 text-white px-4 py-2 rounded">Create</button>
        {message && <p className="text-green-600">{message}</p>}
      </form>
    </div>
  );
};

export default CreateWarehouse;


//Backend
// Thêm đoạn này vào trong warehouseRoutes.js
router.post('/create', async (req, res) => {
    const {
        material_code,
        material_name,
        materials_url,
        material_status,
        condition_percentage,
        price,
        quantity,
        category_id,
        supplier_id
    } = req.body;

    try {
        const [existing] = await db.execute(
            'SELECT material_id FROM Materials WHERE material_code = ?',
            [material_code]
        );
        if (existing.length > 0) {
            return res.status(400).json({ message: 'Material code already exists' });
        }

        await db.execute(`
            INSERT INTO Materials (
                material_code, material_name, materials_url, material_status,
                condition_percentage, price, quantity, category_id, supplier_id
            )
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        `, [
            material_code, material_name, materials_url || null, material_status,
            condition_percentage, price, quantity, category_id, supplier_id || null
        ]);

        res.status(201).json({ message: 'Material created successfully' });
    } catch (err) {
        console.error('Error creating material:', err);
        res.status(500).json({ message: 'Internal server error' });
    }
});

// routes/categoryRoutes.js
router.get('/', async (req, res) => {
    const [rows] = await db.execute('SELECT category_id, category_name FROM Categories WHERE disable = 0');
    res.json(rows);
});

// routes/supplierRoutes.js
router.get('/', async (req, res) => {
    const [rows] = await db.execute('SELECT supplier_id, supplier_name FROM Suppliers WHERE disable = 0');
    res.json(rows);
});
